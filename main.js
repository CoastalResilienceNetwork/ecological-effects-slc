require({    // Specify library locations.    // The calls to location.pathname.replace() below prepend the app's root path to the specified library location.    // Otherwise, since Dojo is loaded from a CDN, it will prepend the CDN server path and fail, as described in    // https://dojotoolkit.org/documentation/tutorials/1.7/cdn    packages: [        {            name: "d3",            location: "//d3js.org",            main: "d3.v3.min"        },        {            name: "underscore",            location: "//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3",            main: "underscore-min"        }		,		{ 			name: "foundation", 			location: "https://cdnjs.cloudflare.com/ajax/libs/foundation/6.2.3/", 			main: "foundation" 		}//		{ //			name: "jquery-ui", //			location: "//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/", //			main: "jquery-ui.min" //		}    ]});define([        "dojo/_base/declare",		"framework/PluginBase",		"d3",//		"jquery",//		"jquery-ui",
		"./resources/chosen.jquery",		"dojo/dnd/move",		"esri/request",		"esri/toolbars/draw",		"esri/layers/FeatureLayer",		"esri/layers/ArcGISDynamicMapServiceLayer",		"esri/layers/ArcGISTiledMapServiceLayer",		"esri/layers/ArcGISImageServiceLayer",		"esri/layers/ImageServiceParameters",		"esri/layers/MosaicRule",		"esri/layers/RasterFunction",		"esri/tasks/ImageServiceIdentifyTask",		"esri/tasks/ImageServiceIdentifyParameters",		"esri/tasks/QueryTask",		"esri/tasks/query",		"esri/graphicsUtils",		"esri/graphic",		"esri/symbols/SimpleLineSymbol",		"esri/symbols/SimpleFillSymbol",		"esri/symbols/SimpleMarkerSymbol",		"esri/geometry/Extent",		"esri/geometry/Polygon",		"esri/geometry/Point",		"esri/request",		"dijit/registry",		"dijit/form/Button",		"dijit/form/MultiSelect",		"dijit/form/DropDownButton",		"dijit/DropDownMenu",		"dijit/MenuItem",		"dijit/layout/ContentPane",		"dijit/layout/TabContainer",		"dijit/form/HorizontalSlider",		"dijit/form/CheckBox",		"dijit/form/RadioButton",		"dojo/dom",		"dojo/dom-class",		"dojo/dom-style",		"dojo/_base/window",		"dojo/dom-construct",		"dojo/dom-attr",		"dojo/dom-geometry",		"dijit/Dialog",		'dojox/layout/ResizeHandle',		"dojox/charting/Chart",		"dojox/charting/plot2d/Pie",		"dojox/charting/action2d/Highlight",        "dojox/charting/action2d/MoveSlice" ,		"dojox/charting/action2d/Tooltip",        "dojox/charting/themes/MiamiNice",		"dojox/charting/widget/Legend",		"dojox/lang/functional",		"dojo/_base/Color",		"dojo/html",		"dojo/_base/array",		"dojo/aspect",		"dojo/_base/lang",		'dojo/_base/json',		"dojo/_base/window",		"dojo/on",		"dojo/parser",		"dojo/query",		"dojo/NodeList-traverse",		"require",		"dojo/text!./config.json",		"xstyle/css!./main.css",		"xstyle/css!./resources/chosen.css"       ],       function (declare,					PluginBase,					d3,//					$,//					jqui,
					chosen,					move,					ESRIRequest,					Drawer,					FeatureLayer,					ArcGISDynamicMapServiceLayer,					ArcGISTiledMapServiceLayer,					ArcGISImageServiceLayer,					ImageServiceParameters,					MosaicRule,					RasterFunction,					ImageServiceIdentifyTask,					ImageServiceIdentifyParameters,					QueryTask,					esriQuery,					graphicsUtils,					Graphic,					SimpleLineSymbol,					SimpleFillSymbol,					SimpleMarkerSymbol,					Extent,					Polygon,					Point,					esriRequest,					registry,					Button,					MultiSelect,					DropDownButton,					DropDownMenu,					MenuItem,					ContentPane,					TabContainer,					HorizontalSlider,					CheckBox,					RadioButton,					dom,					domClass,					domStyle,					win,					domConstruct,					domAttr,					domGeom,					Dialog,					ResizeHandle,					Chart,					Pie,					Highlight,					MoveSlice,					Tooltip,					MiamiNice,					Legend,					dn,					Color,					html,					array,					aspect,					lang,					dJson,					win,					on,					parser,					dojoquery,					NodeListtraverse,					localrequire,					eeSLCconfigObject					) {							_ee_config = dojo.eval("[" + eeSLCconfigObject + "]")[0];	_infographic_ee = _ee_config.infoGraphic;	//console.log(_infographic);	if (_infographic_ee != undefined) {		_infographic_ee = localrequire.toUrl("./" + _infographic_ee);	}			if (_ee_config.pluginWidth == undefined) {		_ee_config.pluginWidth = 420;	}			if (_ee_config.pluginHeight == undefined) {		_ee_config.pluginHeight = 500;	}	        function setupViewTabs($tabHost) {            var $tabContent = $tabHost.find('.tabs-content'),                $tabs = $tabHost.find('.tabs');                        $tabHost.on("click", "dl.tabs a", function() {                var $tab = $(this);                $tabContent.find('li').removeClass('active');                $tabs.find('dd').removeClass('active');                                $tab.parent().addClass('active');                $tabContent.find('#' + $tab.data('content')).addClass('active');            });        }	_eeLocalData = localrequire.toUrl("./data.txt");		return declare(PluginBase, {		toolbarName:  _ee_config.pluginName,        toolbarType: "sidebar",		showServiceLayersInLegend: true,        allowIdentifyWhenActive: false,		rendered: false,		infoGraphic: _infographic_ee,		width: _ee_config.pluginWidth,		height: _ee_config.pluginHeight,               activate: function () {				   				   if (this.rendered == false) {				   					outerBox = $('<div class="eeheader" />').appendTo($(this.container));										oMainBox = $('<div class="eecontent" id=omainBox_' + this.map.id + '/>').appendTo($(this.container));										mainBox = $('<div class="eeMain" id=eeMainBox_' + this.map.id + '/>').appendTo($(oMainBox));										footerBox = $('<div class="eefooter" id=eeFooterBox_' + this.map.id + '/>').appendTo($(this.container));										s = $('<select class="chosenDD chosen-select mainChosen" id=eeGeoSelect_' + this.map.id + ' data-placeholder="Choose a Region" />')					$('<option />', {value: "", text: ""}).appendTo(s);										for(var reg in _ee_config.regions) {						region = _ee_config.regions[reg];						$('<option />', {value: region.name, text: region.name}).appendTo(s);					}					console.log(this.container);					s.appendTo(outerBox);						$(".chosenDD").chosen({disable_search_threshold: 10}).change($.proxy(function(val) {					  this.changeGeo(val);					}, this));					//parser.parse();					$(".chosen-container").css("width", "50%");									   				    this.rendered =  true;				   				   } 				   				   				   				   				   /*				    //set up dropdown
					sel = '<select class="chosen-select" data-placeholder="Choose a Country..." tabindex="1">      <option value="United States">Kiholo</option>             <option value="United Kingdom">United Kingdom</option>             <option value="Afghanistan">Afghanistan</option>             <option value="Aland Islands">Aland Islands</option>             <option value="Albania">Albania</option>           </select>'

					selnode = domConstruct.create("div", {innerHTML: sel, style:"padding:5px"})

					this.container.appendChild(selnode);
					parser.parse();

					$(".chosen-select").chosen({disable_search_threshold: 10});

					parser.parse();

					$(".chosen-container").css("width", "50%");
					
			   				    //domClass.add(this.container, "claro");				   						this.mainNode = domConstruct.create("div", {"style": "width: 100%;padding:10px", "id": "outerZiv"});					this.container.appendChild(this.mainNode);										node2 = domConstruct.create("div", {"style": "width: 76%; ", "class": "sliderer"});										this.mainNode.appendChild(node2);				   						node3 = domConstruct.create("div", {style: "padding-top:10px", innerHTML: '<span style="float: left;">Current</span><span style="float: right; width: 25%">High</span><span style="float: right;width: 25%;">Medium</span><span style="float: right;width: 25%;">Low</span>'}); 						//node3 = domConstruct.create("div", {innerHTML: '<table style="width:100%;border:none"><tr><th style="text-align: left">Current</th><th style="text-align: center">Low</th><th style="text-align: center">Medium</th><th style="text-align: right">High</th></tr></table>'}); 										this.mainNode.appendChild(node3);										parser.parse()			
										//	  $( function() {					$( ".sliderer" ).slider({    value: 1,    min: 1,    max: 4,    step: 1});




			//	  } );*/

txt = '<div><dl class="tabs report-plugin-tabs">           <dd class="active"><a data-content="report-plugin-tab-select">Report Selection</a></dd>           <dd><a id="plugin-report-result-tab" data-content="report-plugin-tab-result">Report Results</a></dd>         </dl>          <ul class="tabs-content report-plugin-list">           <li class="active" id="report-plugin-tab-select">             <h5>Step 1: Select Report</h5>             <div>                 <select id="report-plugin-report-select"></select>             </div>             <div id="report-plugin-report-description">                 <%= firstDescription %>             </div>             <div>                 <h5>Step 2: Draw an area on the map</h5>                 <button id="report-plugin-draw" class="button radius">Draw area of interest</button>                     <h5>Step 3: Generate Report</h5>                 <button id="report-plugin-request" class="button radius" disabled="disabled">Generate</button>                 <div class="plugin-report-spinner"></div>             </div>           </li>            <li id="report-plugin-tab-result">               <span class="default"><div class="range-slider" data-slider>   <span class="range-slider-handle" role="slider" tabindex="0"></span>   <span class="range-slider-active-segment"></span>   <input type="hidden"> </div></span>           </li>         </ul></div>'		//tabsTxt = '<div><dl class="tabs report-plugin-tabs">'//$.each([ 52, 97 ], function( index, value ) {//  alert( index + ": " + value );//});//Tabitem = '<dd class="active"><a data-content="report-plugin-tab-select">Report Selection</a></dd>'       //$(txt).appendTo(mainBox);//setupViewTabs($(this.container));//node4 = domConstruct.create("div", {innerHTML: txt})

//this.mainNode.appendChild(node4);

//$('#tabs').tabs();  								   },			   			   			   changeGeo: function(geo) {				selectedGeo = $("#eeGeoSelect_" + this.map.id)[0].value;				console.log(selectedGeo);								$.each(_ee_config.regions, function( index, value ) {				  if (selectedGeo == value.name) {						selectedRegion = value;				  }				});								mainBox = $("#omainBox_" + this.map.id).empty();								parser.parse();								mainBox = $('<div class="eeMain" id=eeMainBox_' + this.map.id + '><div id="eeTab_' + this.map.id + '"></div></div>').appendTo($(oMainBox));				tabsTxt = '<div><dl class="tabs report-plugin-tabs">'				$.each(selectedRegion.tabs, function( index, value ) {				  //alert( index + ": " + value );				  if (index == selectedRegion.selectedTab) { classAdd = "active" } else { classAdd = ""};				  Tabitem = '<dd><a class="' + classAdd + '" data-content="report-plugin-tab-select">' + value.name + '</a></dd>'				  tabsTxt = tabsTxt + Tabitem				});								//tabsTxt = tabsTxt + "</dl></div>"				//tabsTxt = tabsTxt + '</dl><ul class="tabs-content report-plugin-list">           <li class="active" id="report-plugin-tab-select"> <div id="slider"></div>             <h5>Step 1: Select Report</h5>             <div>                 <select id="report-plugin-report-select"></select>             </div>             <div id="report-plugin-report-description">                 <%= firstDescription %>             </div>             <div>                 <h5>Step 2: Draw an area on the map</h5>                 <button id="report-plugin-draw" class="button radius">Draw area of interest</button>                     <h5>Step 3: Generate Report</h5>                 <button id="report-plugin-request" class="button radius" disabled="disabled">Generate</button>                 <div class="plugin-report-spinner"></div>             </div>           </li>            <li id="report-plugin-tab-result">               <span class="default"><div class="range-slider" data-slider>   <span class="range-slider-handle" role="slider" tabindex="0"></span>   <span class="range-slider-active-segment"></span>   <input type="hidden"> </div></span>           </li>         </ul></div>'								//$(tabsTxt).appendTo(mainBox);				//setupViewTabs($(this.container));												this.tabpan = new TabContainer({        style: "height: 100%; width: 100%;"    });		dom.byId('eeMainBox_' + this.map.id).appendChild(this.tabpan.domNode);				$.each(selectedRegion.tabs, function( index, value ) {				  //alert( index + ": " + value );				  if (index == selectedRegion.selectedTab) { classAdd = "active" } else { classAdd = ""};				  Tabitem = '<dd><a class="' + classAdd + '" data-content="report-plugin-tab-select">' + value.name + '</a></dd>'				  tabsTxt = tabsTxt + Tabitem				});					array.forEach(selectedRegion.tabs, lang.hitch(this,function(tab, t){					if (tab.disabled == undefined) {tab.disabled = false}								sliderpane = new ContentPane({				  "data-pane": "ActualTabs",				  title: '<span title="' + tab.hoverText + '">' + tab.name + '</span>',				  "data-index": t,				  "disabled": tab.disabled,				  index: t				});					this.tabpan.addChild(sliderpane);								array.forEach(tab.sliders, lang.hitch(this,function(entry, i){											nslidernodeheader = domConstruct.create("div", {innerHTML: entry.name, class:'eeSliderHeader'})							sliderpane.domNode.appendChild(nslidernodeheader);				 							nslidernode = domConstruct.create("div");							sliderpane.domNode.appendChild(nslidernode);														inlabels = ""														array.forEach(entry.values, lang.hitch(this,function(val, v){								inlabels = inlabels + '<li>' + val.name + '</li>'							}));														labelsnode = domConstruct.create("ol", {"data-dojo-type":"dijit/form/HorizontalRuleLabels", container:"bottomDecoration", style:"", innerHTML: inlabels})							nslidernode.appendChild(labelsnode);							slider = new HorizontalSlider({								name: entry.group,								"data-mexslider": "mexSlider",								value: entry.default,								minimum: 1,//entry.min,								maximum: entry.values.length,								showButtons:false,								title: entry.name,								//intermediateChanges: true,								tabindex: t,								//order: itemIndex,								discreteValues: entry.values.length,								index: i,								//onClick: lang.hitch(this,function(b){ 								//	allChecks = dojoquery("[name=ExplorerAncillaryCheck]");																	//	array.forEach(allChecks, lang.hitch(this,function(checkerBox, j){								//										//			cb = registry.byId(checkerBox.id);								//			cb.set("checked", false);								//											//	}));																//}),								onChange: lang.hitch(this,function(){this.sliderChange()}),								style: "width:90%;"							}, nslidernode);														nsliderpad = domConstruct.create("div", {class:'eeSliderPad'})							sliderpane.domNode.appendChild(nsliderpad);														parser.parse()								}));					d3Area = domConstruct.create("div", {id: "d3Area_" + this.map.id + "_" + t, class:'d3Area'})		sliderpane.domNode.appendChild(d3Area);				parser.parse()		data = this.chartData.filter(function(d) { return d.Region == selectedGeo})					console.log(data);			svgMargin = {top: 20, right: 30, bottom: 40, left: 150},    svgWidth = 500 - svgMargin.left - svgMargin.right,    svgHeight = 500 - svgMargin.top - svgMargin.bottom;		this.svg = d3.select("#d3Area_" + this.map.id + "_" + t).append("svg")		.attr("width", svgWidth + svgMargin.left + svgMargin.right)		.attr("height", svgHeight + svgMargin.top + svgMargin.bottom)		.attr("class", "chart")		.append("g")		.attr("transform", "translate(" + svgMargin.left + "," + svgMargin.top + ")");		//d3Area = domConstruct.create("div", {innerHTML: "d3Area_" + this.map.id, class:'d3Area'})		//this.sliderpane.domNode.appendChild(d3Area);					}));	    this.tabpan.startup();				    parser.parse();					   },			   			   sliderChange: function() {	svgMargin = {top: 20, right: 30, bottom: 40, left: 150},    svgWidth = 500 - svgMargin.left - svgMargin.right,    svgHeight = 500 - svgMargin.top - svgMargin.bottom;	data = this.chartData.filter(function(d) { return d.Region == selectedGeo})var width = 420,    barHeight = 20;var x = d3.scale.linear()    .range([0, svgMargin]);	var y = d3.scale.ordinal()    .rangeRoundBands([0, svgHeight], 0.2);	var chart = d3.select(".chart")    //.attr("width", width)    //.attr("height", barHeight * data.length);var bar = chart.selectAll("g")    .data(data)    .enter().append("g")//    .attr("transform", function(d, i) { return "translate(0," + i * barHeight + ")"; });	bar.append("rect")    .attr("x", function(d) { return x(0); })     // .attr("y", function(d) { return y(d.Name) + 10; })    .attr("width", function(d) { return x(d.N_CURRENT); })    .attr("height", barHeight - 1);bar.append("text")    .attr("x", function(d) { return x(d) - 3; })    .attr("y", barHeight / 2)    .attr("dy", ".35em")    .text(function(d) { return d; });				   /*			   	svgMargin = {top: 20, right: 30, bottom: 40, left: 150},    svgWidth = 500 - svgMargin.left - svgMargin.right,    svgHeight = 500 - svgMargin.top - svgMargin.bottom;	data = this.chartData.filter(function(d) { return d.Region == selectedGeo})var x = d3.scale.linear()    .range([0, svgWidth]);var y = d3.scale.ordinal()    .rangeRoundBands([0, svgHeight], 0.2);var xAxis = d3.svg.axis()    .scale(x)    .orient("bottom");var yAxis = d3.svg.axis()    .scale(y)    .orient("left")    .tickSize(0)    .tickPadding(6);  x.domain(d3.extent(data, function(d) { return d.N_CURRENT; })).nice();  //x.domain([Math.max(-200,d3.min(data, function(d) { return d.ny2080; })),Math.min(200,d3.max(data, function(d) { return d.ny2080; }))]).nice();  //x.domain([Math.max(-200,d3.min(data, function(d) { return d.ny2080; })),Math.min(200,d3.max(data, function(d) { return d.ny2080; }))]).nice();  y.domain(data.map(function(d) { return d.Name; }));  var g = this.svg.selectAll(".bar")      .data(data)	  .enter().append("g")	      g.append("rect")      .attr("class", function(d) { return "bar bar--current"; })      .attr("x", function(d) { return x(0); })      .attr("y", function(d) { return y(d.Name) + 10; })      .attr("width", function(d) { return Math.abs(x(d.N_CURRENT) - x(0)); })      .attr("height", y.rangeBand() - 20)	   	   	g.append("text")      .attr("class", "label")      .attr("x", function(d) { return x(0) + 5; })      .attr("y", function(d) { return y(d.Name) + 32; })            .text(function(d){                return d.value;            }).each(function() {        //labelWidth = Math.ceil(Math.max(labelWidth, this.getBBox().width));    });		  this.svg.append("g")      .attr("class", "x axis")      .attr("transform", "translate(0," + svgHeight + ")")      .call(xAxis);  this.svg.append("g")      .attr("class", "y axis")      .attr("transform", "translate(" + x(0) + ",0)")      .call(yAxis);	  			   /*var margin = {top: 10, right: 30, bottom: 20, left: 150},    w = 480 - margin.left - margin.right,					data = [33,155,62,6,345,2]    x = d3.scale.linear()        .domain([0, 345])        .range([0, w])							bars = d3.select("#d3Area_" + this.map.id + "_0").selectAll("rect.bar")					console.log(bars);										bars.data(data)	bars.attr("class", "bar--negative")	        //.attr("stroke-width", 4)    bars.transition()    .duration(300)    .ease("quad")    .attr("width", x) */			   },               deactivate: function () {			   },               hibernate: function () {			   },			   				initialize: function (frameworkParameters) {					declare.safeMixin(this, frameworkParameters);				    domClass.add(this.container, "claro");									    domClass.add(this.container, "plugin-eeslc");										//function type(d) {					//  console.log(d);					//  d.ncurrent = +d.CURRENT;					//  d.avalue = +d.avalue;					//  d.nvalue = d.value == 0 ? 0 : 100					//  d.lab = d.y2080;					//  d.y2080 = d.y2080 - d.value;					//  d.ny2080 = d.value == 0 ? 100 : (d.y2080 / d.value) * 100					//  console.log(d)					//  return d;					//}							d3.tsv(_eeLocalData, lang.hitch(this,function(error, data) {					  //console.log(data);					  array.forEach(data, lang.hitch(this,function(dm, d){						dm.CURRENT = +dm.CURRENT						//dm.N_LOW_2025 = dm.LOW_2025 / dm.CURRENT												keys = Object.keys(dm)						//console.log(keys);						array.forEach(keys, lang.hitch(this,function(key, k){							dm["N_" + key] = ((dm[key] - dm.CURRENT) / dm.CURRENT) * 100							dm.N_CURRENT = dm.CURRENT / Math.pow(10,(("" + dm.CURRENT).length - 1));						}));						console.log(dm, d)					  }));					  //data2 = data.filter(function(d) { return d.Region == "Kiholo" });					  //console.log(data2);					  this.chartData = data;					  console.log(this.chartData);					}));					  				},			     resize: function(w, h) {					    this.tabpan.resize();				 				 },				render: function() {										this.rendered = true;				},			   showHelp: function () {			   },               getState: function () {				},               setState: function (state) {				},            subregionActivated: function(subregion) {                console.debug('now using subregion ' + subregion.display);            },            subregionDeactivated: function(subregion) {                console.debug('now leaving subregion ' + subregion.display);            }        });    });